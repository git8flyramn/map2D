#include "Stage.h"
#include "MapChip.h"
#include "Input.h"
namespace
{
	//int kx, ky;
	//const int IMAGE_SIZE = { 32 }; //画像全体のサイズ
	//const int MAP_WIDTH = { 32 };
	//const int MAP_HEIGHT = { 22 };
	//const int MAP_CHIP_WIDTH = { 16 }; //画像一つの大きさ
	//const int MAP_CHIP_HEIGHT = { 12 };
	//const int myMap[MAP_HEIGHT][MAP_WIDTH] 
 //    {
	//	{1,1,120,120,120,120,120,120,120,27,157,173,174,157,157,173,174,173,174,1,34,1,1,1,1,103,159,159,159,159,1,1},
	//	{ 1,120,1,1,1,1,1,1,1,106,157,173,174,173,174,189,190,189,190,1,34,1,1,1,1,103,159,159,103,103,1,1},
	//	{ 1,120,2,1,1,1,1,1,1,106,157,189,190,189,190,157,157,189,190,1,34,1,1,1,1,103,175,103,103,103,1,2 },
	//	{ 1,120,2,1,1,1,1,1,1,27,157,157,157,157,157,157,157,157,157,1,34,1,1,1,1,103,191,103,103,103,1,2},
	//	{ 1,120,2,1,1,1,1,1,1,106,43,43,43,106,43,43,43,106,43,43,106,1,1,1,1,103,103,103,103,33,1,2 },
	//	{ 1,120,1,1,1,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,123,123,123,123,2,2,2},
	//	{ 120,120,17,17,17,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,123,123,123,123,18,18,18},
	//	{ 120,33,33,33,33,17,18,17,18,17,17,17,17,17,17,17,18,1,1,1,1,1,1,1,1,123,123,123,123,1,1,2 },
	//	{ 120,33,34,1,2,33,34,17,17,18,33,33,33,33,33,17,17,17,17,18,1,1,1,1,17,123,123,123,123,17,17,18 },
	//	{120,1,2,1,33,33,33,17,33,33,33,33,18,18,18,17,17,18,17,18,1,1,1,17,33,123,123,123,123,33,33,34},
	//	{ 120,1,2,1,17,33,33,33,33,33,33,33,33,33,33,33,33,34,17,17,17,17,17,33,33,17,17,17,17,17,18,34 },
	//	{ 146,146,161,161,146,146,161,161,161,161,161,161,161,161,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,162},
	//	{ 146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,178},
	//	{ 120,2,2,1,33,103,1,1,68,68,1,103,17,18,33,33,17,17,17,18,34,34,34,34,34,34,17,18,34,18,17,18},
	//	{ 120,2,2,1,33,34,103,1,67,68,1,1,103,18,33,34,17,18,17,17,17,17,17,17,17,18,33,34,34,34,17,18},
	//	{ 120,2,2,1,33,34,34,103,67,67,51,67,1,103,34,17,18,18,18,18,17,18,18,33,17,17,18,33,17,18,17,18},
	//	{ 120,2,2,1,2,33,34,34,103,1,67,68,1,1,103,34,18,34,34,34,18,34,34,18,33,17,18,33,17,18,17,18},
	//	{ 120,2,18,1,2,33,34,17,34,103,67,67,67,1,1,103,17,17,17,18,119,119,119,119,119,18,18,103,103,103,17,18},
	//	{ 120,2,34,17,18,33,34,17,34,34,103,103,67,67,52,34,103,119,119,119,119,67,67,67,119,119,119,67,67,67,67,67},
	//	{ 120,1,1,33,34,119,119,119,119,119,119,119,67,83,68,119,119,119,67,67,67,67,67,67,67,67,119,67,67,67,67,67},
	//	{ 120,17,17,119,119,119,67,67,67,67,67,67,119,119,119,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67},
	//	{ 119,119,119,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67 },
 //    };
	//const int IMAGE_SIZE = { 32 }; //画像全体のサイズ
	//const int MAP_WIDTH = { 32 };
	//const int MAP_HEIGHT = { 22 };
	//const int MAP_CHIP_WIDTH = { 16 }; //画像一つの大きさ
	//const int MAP_CHIP_HEIGHT = { 12 };
	//const int myMap[MAP_HEIGHT][MAP_WIDTH];
	 const int mapEdit = LoadGraph("./bg.png");
	 const int MAP_EDIT_X = 1025;
}
Stage::Stage()
	:GameObject()
{
	////vectorの初期化 配列名 =  std::vector<型名>(配列の大きさ,-1) -1で初期化
	//BgHandle_ = std::vector<int>(MAP_WIDTH*MAP_HEIGHT, -1);
	////BgHandle = new int[MAP_WIDTH * MAP_HEIGHT]; //必要な時に必要な数だけ配列を準備する方法
	//                                            // new int・・・ BgHandle[0]〜[size - 1]
	//
	////BgHandle = LoadGraph("bg.png");
	//LoadDivGraph("./bg.png", MAP_CHIP_WIDTH * MAP_CHIP_HEIGHT, MAP_CHIP_WIDTH, MAP_CHIP_HEIGHT,
	//	         IMAGE_SIZE, IMAGE_SIZE, BgHandle_.data());
	mapChip_ = new MapChip();
	mapEdit_ = new MapEdit();
	mousePos_.x = -10;
	mousePos_.y = -10;
	isMouseDown_ = false;
	isOldMouseDown_ = false;
	isDragging_ = false;
}

Stage::~Stage()
{
	/*for (int i = 0; i < MAP_CHIP_WIDTH * MAP_CHIP_HEIGHT; i++)
	{
		if (BgHandle_[i] != -1)
		{
			DeleteGraph(BgHandle_[i]);
			BgHandle_[i] = -1;
		}
	}
	*/
	//delete[] BgHandle; //配列の解放　準備した配列を元に戻す
	/*if (BgHandle != -1) {
		DeleteGraph(BgHandle);
		BgHandle = -1;
	}*/
	delete mapChip_; //マップのインスタンスを解放
	delete mapEdit_;
}


void Stage::Update()
{
	if (Input::IsButtonDown(MOUSE_INPUT_LEFT))
	{
		//マウスが押された瞬間の処理
		DxLib::printfDx("左が押されました:\n");
	}

	if (Input::IsButtonDown(MOUSE_INPUT_RIGHT))
	{
		//マウスが押された瞬間の処理
		DxLib::printfDx("右が押されました:");
	}

	if (Input::IsButtonKeep(MOUSE_INPUT_LEFT))
	{
		//マウスが押されている間の処理
		DxLib::printfDx("左が押されている:");
	}

	if (Input::IsButtonKeep(MOUSE_INPUT_RIGHT))
	{
		//マウスが押されている間の処理
		DxLib::printfDx("右が押されている:");
	}
	if (Input::IsButtonUP(MOUSE_INPUT_LEFT))
	{
		//マウスが離された瞬間
		DxLib::printfDx("左が離された: ");
	}
	if (Input::IsButtonUP(MOUSE_INPUT_RIGHT))
	{
		//マウスが離された瞬間
		DxLib::printfDx("右が離された: ");
	}
	
	int mx = -1, my = -1;
	if (GetMousePoint(&mx, &my) == 0)
	{
		DxLib::printfDx("マウスの座標(%d,%d)\n",mx,my);
	}
	else
	{
		DxLib::printfDx("マウスの座標取得失敗\n");
	}
	
	
		//DrawBox(MAP_EDIT_X,0,MAP_EDIT_X + MAP_IMAGE_SIZE,0, GetColor(0, 0, 255), TRUE);
	
}

void Stage::Draw()
{
	
		//0〜15　/16 = 0
		//16〜31 /16 = 1
		//32〜48 /16 = 2
	//for (int j = 0; j < MAP_HEIGHT; j++) //たて
	//{
	//	for (int i = 0; i < MAP_WIDTH; i++) //よこ
	//	{	
	//		if (BgHandle_[myMap[j][i]] != -1) {
	//				DrawGraph(i * IMAGE_SIZE, j * IMAGE_SIZE, BgHandle_[myMap[j][i]], TRUE);
	//				
	//		}
	//		
	//	}
	//}
}
